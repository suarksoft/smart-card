import express from "express";
import bodyParser from "body-parser";
import cors from "cors";
import dotenv from "dotenv";
import connectDB from "./db.js"; // MongoDB baÄŸlantÄ±sÄ±nÄ± import et
import { mintTokenToUser, getBalanceOf, transferTokens } from "./mint-soroban.js";
import { registerWaterCard, getWaterUsageData, getCommunityAverage } from "./water-service.js";
import OpenAI from 'openai';
import { Donation } from './models/Donation.js';
import { Project } from './models/Project.js';

dotenv.config();

connectDB(); // VeritabanÄ±na baÄŸlan

const app = express();
app.use(cors());
app.use(bodyParser.json());

// OpenAI istemcisini baÅŸlat
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY // .env dosyasÄ±nda tanÄ±mlanmÄ±ÅŸ olmalÄ±
});

// Onaylanan projeleri saklamak iÃ§in basit bir dizi (veritabanÄ± yerine)
const approvedProjects = [];

// Projeyi deÄŸerlendirme endpoint'i
app.post("/api/evaluate-project", async (req, res, next) => {
  const { walletAddress, projectName, projectDesc } = req.body;
  
  if (!walletAddress || !projectName || !projectDesc) {
    return res.status(400).json({ 
      success: false, 
      error: "CÃ¼zdan adresi, proje adÄ± ve aÃ§Ä±klamasÄ± gerekli" 
    });
  }
  
  try {
    let evaluation;

    if (process.env.USE_MOCK_OPENAI === 'true') {
      console.log("ğŸ¤– Mock OpenAI deÄŸerlendirmesi kullanÄ±lÄ±yor.");
      // Gecikme simÃ¼lasyonu
      await new Promise(resolve => setTimeout(resolve, 1500)); 

      const mockScore = Math.floor(Math.random() * 50) + 50; // 50-99 arasÄ± puan
      const isApproved = mockScore >= 70;

      evaluation = {
        score: mockScore,
        feedback: isApproved
          ? "Bu, sahte veri ile oluÅŸturulmuÅŸ bir onay geri bildirimidir. Projeniz, Ã§evre dostu ve sÃ¼rdÃ¼rÃ¼lebilirlik hedefleriyle mÃ¼kemmel bir ÅŸekilde uyumlu gÃ¶rÃ¼nÃ¼yor. Topluluk Ã¼zerinde pozitif bir etki yaratma potansiyeli yÃ¼ksek."
          : "Bu, sahte veri ile oluÅŸturulmuÅŸ bir ret geri bildirimidir. Projeniz ilginÃ§ olsa da, mevcut Ã§evre dostu ve sÃ¼rdÃ¼rÃ¼lebilirlik kriterlerimizi tam olarak karÅŸÄ±lamÄ±yor. LÃ¼tfen projenizin Ã§evresel etkilerini daha detaylÄ± aÃ§Ä±klayarak tekrar baÅŸvurun.",
        approved: isApproved,
      };
      
    } else {
      // OpenAI'ye deÄŸerlendirme iÃ§in istek gÃ¶nder
      const completion = await openai.chat.completions.create({
        model: "gpt-4o",
        messages: [
          {
            role: "system",
            content: `Sen bir Ã§evre dostu ve sÃ¼rdÃ¼rÃ¼lebilir projeleri deÄŸerlendiren bir uzmansÄ±n. 
            Projeleri aÅŸaÄŸÄ±daki kriterlere gÃ¶re 0-100 arasÄ± bir puanla deÄŸerlendir:
            
            1. Ã‡evresel Etki (30 puan): Proje doÄŸal kaynaklarÄ± koruyor mu, kirliliÄŸi azaltÄ±yor mu?
            2. SÃ¼rdÃ¼rÃ¼lebilirlik (25 puan): Proje uzun vadede sÃ¼rdÃ¼rÃ¼lebilir mi?
            3. YenilikÃ§ilik (20 puan): Proje Ã¶zgÃ¼n ve yenilikÃ§i fikirler iÃ§eriyor mu?
            4. Toplumsal Fayda (15 puan): Proje topluma ve su tasarrufuna nasÄ±l katkÄ± saÄŸlÄ±yor?
            5. Uygulanabilirlik (10 puan): Proje teknik olarak uygulanabilir mi?
            
            YanÄ±tÄ±nÄ± ÅŸu JSON formatÄ±nda ver: 
            {
              "score": [0-100 arasÄ± puan],
              "feedback": [DeÄŸerlendirme geri bildirimi],
              "approved": [70 ve Ã¼zeri puan iÃ§in true, altÄ± iÃ§in false]
            }`
          },
          {
            role: "user",
            content: `Proje AdÄ±: ${projectName}\n\nProje AÃ§Ä±klamasÄ±: ${projectDesc}`
          }
        ],
        response_format: { type: "json_object" }
      });
      
      const responseContent = completion.choices[0].message.content;
      evaluation = JSON.parse(responseContent);
    }
    
    // Onaylanan projeyi veritabanÄ±na ekle
    if (evaluation.approved) {
      const projectId = `proj-${Date.now()}`;
      
      const newProject = new Project({
        id: projectId,
        isim: projectName,
        aciklama: projectDesc.substring(0, 150) + (projectDesc.length > 150 ? '...' : ''),
        resim: `https://via.placeholder.com/80x80/${getRandomColor()}/ffffff?text=ğŸŒ±`,
        hedef: Math.floor(Math.random() * 5000) + 1000, // 1000-6000 arasÄ± rastgele hedef
        toplanan: 0,
        katilimci: 0,
        kalanGun: Math.floor(Math.random() * 30) + 5, // 5-35 gÃ¼n arasÄ±
        walletAddress, // Proje sahibinin cÃ¼zdan adresi
        approved: true
      });
      
      await newProject.save();
    }
    
    res.json({
      success: true,
      score: evaluation.score,
      feedback: evaluation.feedback,
      approved: evaluation.approved
    });
  } catch (err) {
    console.error('Proje deÄŸerlendirme hatasÄ±:', err);
    res.status(500).json({ 
      success: false, 
      error: "Proje deÄŸerlendirilirken bir hata oluÅŸtu" 
    });
  }
});

// Onaylanan projeleri veritabanÄ±ndan getir
app.get("/api/approved-projects", async (req, res) => {
  try {
    // VeritabanÄ±ndan projeleri getir
    const projects = await Project.find({ approved: true });
    
    res.json({
      success: true,
      projects
    });
  } catch (err) {
    console.error('Proje getirme hatasÄ±:', err);
    res.status(500).json({ 
      success: false, 
      error: "Projeler getirilirken bir hata oluÅŸtu" 
    });
  }
});

// Rastgele renk kodu oluÅŸturucu yardÄ±mcÄ± fonksiyon
function getRandomColor() {
  const colors = ['10b981', '6366f1', 'ef4444', 'f59e0b', '8b5cf6', '3b82f6'];
  return colors[Math.floor(Math.random() * colors.length)];
}



// Su kartÄ± kaydÄ±
app.post("/api/register-card", async (req, res) => {
  const { cardId, wallet } = req.body;
  
  if (!cardId || !wallet) {
    return res.status(400).json({ 
      success: false, 
      error: "Kart ID ve cÃ¼zdan adresi gerekli" 
    });
  }
  
  try {
    const result = await registerWaterCard(cardId, wallet);
    res.json({ success: true, data: result });
  } catch (err) {
    console.error('Kart kayÄ±t hatasÄ±:', err);
    res.status(500).json({ success: false, error: err.message });
  }
});

// Su kullanÄ±m verilerini getir
app.get("/api/water-usage/:cardId", async (req, res) => {
  const { cardId } = req.params;
  
  if (!cardId) {
    return res.status(400).json({ 
      success: false, 
      error: "Kart ID gerekli" 
    });
  }
  
  try {
    const data = await getWaterUsageData(cardId);
    res.json({ success: true, data });
  } catch (err) {
    console.error('Su kullanÄ±m verisi hatasÄ±:', err);
    res.status(500).json({ success: false, error: err.message });
  }
});

// Topluluk ortalamasÄ±nÄ± getir
app.get("/api/community-average", async (req, res) => {
  try {
    const data = await getCommunityAverage();
    res.json({ success: true, data });
  } catch (err) {
    console.error('Topluluk ortalamasÄ± hatasÄ±:', err);
    res.status(500).json({ success: false, error: err.message });
  }
});

// Token bakiyesi endpoint'i
app.get("/api/balance/:wallet", async (req, res) => {
  const { wallet } = req.params;
  
  if (!wallet) {
    return res.status(400).json({ 
      success: false, 
      error: "CÃ¼zdan adresi gerekli" 
    });
  }
  
  try {
    const balance = await getBalanceOf(wallet);
    res.json({ success: true, balance });
  } catch (err) {
    console.error('Bakiye getirme hatasÄ±:', err);
    res.status(500).json({ success: false, error: err.message });
  }
});

// Tasarruf Ã¶dÃ¼lÃ¼ mint etme
app.post("/api/conservation-reward", async (req, res) => {
  const { wallet, amount } = req.body;
  
  if (!wallet || !amount) {
    return res.status(400).json({ 
      success: false, 
      error: "CÃ¼zdan adresi ve miktar gerekli" 
    });
  }
  
  try {
    const result = await mintTokenToUser(wallet, amount);
    res.json({ success: true, tx: result });
  } catch (err) {
    console.error('Ã–dÃ¼l mint hatasÄ±:', err);
    res.status(500).json({ success: false, error: err.message });
  }
});

// Token transfer et
app.post("/api/transfer", async (req, res) => {
  const { fromWallet, toWallet, amount } = req.body;
  
  if (!fromWallet || !toWallet || !amount) {
    return res.status(400).json({ 
      success: false, 
      error: "GÃ¶nderen, alÄ±cÄ± ve miktar gerekli" 
    });
  }
  
  try {
    const result = await transferTokens(fromWallet, toWallet, amount);
    res.json({ success: true, tx: result });
  } catch (err) {
    console.error('Transfer hatasÄ±:', err);
    res.status(500).json({ success: false, error: err.message });
  }
});

// BaÄŸÄ±ÅŸ yapma API'si
app.post("/api/donate", async (req, res, next) => {
  const { walletAddress, projectId, amount } = req.body;

  if (!walletAddress || !amount) {
    return res.status(400).json({ 
      success: false, 
      error: "CÃ¼zdan adresi ve miktar gerekli" 
    });
  }

  try {
    const adminWallet = process.env.ADMIN_PUBLIC_KEY;
    if (!adminWallet) {
      throw new Error("ADMIN_PUBLIC_KEY .env dosyasÄ±nda tanÄ±mlanmamÄ±ÅŸ.");
    }
    
    console.log(`ğŸ’¸ BaÄŸÄ±ÅŸ: ${amount} SHT ${walletAddress}'dan ${adminWallet}'e transfer ediliyor...`);
    
    // 1. Token transferini gerÃ§ekleÅŸtir
    const result = await transferTokens(walletAddress, adminWallet, parseInt(amount));

    // 2. Transfer baÅŸarÄ±lÄ±ysa veritabanÄ± iÅŸlemlerini yap
    const donation = new Donation({
      walletAddress,
      projectId: projectId || 'community-fund',
      amount: parseInt(amount),
      txHash: result.txHash
    });
    
    await donation.save();
    
    // Proje varsa, projenin toplanan miktarÄ±nÄ± ve katÄ±lÄ±mcÄ± sayÄ±sÄ±nÄ± gÃ¼ncelle
    if (projectId) {
      const existingDonation = await Donation.findOne({ walletAddress, projectId });

      await Project.updateOne(
        { id: projectId },
        { 
          $inc: { toplanan: parseInt(amount) },
          // EÄŸer bu kullanÄ±cÄ±nÄ±n bu projeye ilk baÄŸÄ±ÅŸÄ±ysa, katÄ±lÄ±mcÄ±yÄ± artÄ±r
          ...(existingDonation ? {} : { $inc: { katilimci: 1 } })
        }
      );
    }
    
    // 3. BaÅŸarÄ±lÄ± yanÄ±tÄ± gÃ¶nder
    res.json({
      success: true,
      message: `${amount} token baÅŸarÄ±yla baÄŸÄ±ÅŸlandÄ±`,
      txHash: result.txHash
    });

  } catch (err) {
    // Hata oluÅŸursa, hatayÄ± merkezi hata yakalayÄ±cÄ±ya ilet
    next(err);
  }
});

// CÃ¼zdan adresine gÃ¶re su kartÄ±nÄ± getir
app.get("/api/card-by-wallet/:wallet", async (req, res) => {
  const { wallet } = req.params;
  
  if (!wallet) {
    return res.status(400).json({ 
      success: false, 
      error: "CÃ¼zdan adresi gerekli" 
    });
  }
  
  try {
    const WaterCard = (await import('./models/WaterCard.js')).WaterCard;
    const card = await WaterCard.findOne({ walletAddress: wallet });
    
    if (card) {
      res.json({ 
        success: true, 
        card: {
          cardId: card.cardId,
          wallet: card.walletAddress,
          usage: card.usage || []
        }
      });
    } else {
      res.json({ 
        success: true, 
        card: null
      });
    }
  } catch (err) {
    console.error('CÃ¼zdan kartÄ± getirme hatasÄ±:', err);
    res.status(500).json({ success: false, error: err.message });
  }
});

// Topluluk fonu bakiyesi
app.get("/api/community-fund-balance", async (req, res) => {
  try {
    res.json({ 
      success: true, 
      balance: 25000 
    });
  } catch (err) {
    console.error('Topluluk fonu bakiyesi hatasÄ±:', err);
    res.status(500).json({ success: false, error: err.message });
  }
});

// Topluluk fonu istatistikleri
app.get("/api/community-fund-stats", async (req, res) => {
  try {
    res.json({ 
      success: true, 
      stats: {
        totalDonations: 150,
        totalAmount: 25000,
        activeProjects: 4,
        beneficiaries: 1200,
        uniqueDonors: 42,
        averageDonation: 175,
        recentDonations: [
          {
            wallet: "GAELIPRPRLJFET6FWVU4KN3R32Z7WH3KCHPTVIJOIYLYIWFUWT2NXJFE",
            amount: 100,
            timestamp: "2024-07-20T12:00:00Z",
            transactionId: "TXN-1"
          },
          {
            wallet: "GCFDIPRPRLJFET6FWVU4KN3R32Z7WH3KCHPTVIJOIYLYIWFUWT2NXYZZZ",
            amount: 50,
            timestamp: "2024-07-19T15:30:00Z",
            transactionId: "TXN-2"
          }
        ]
      }
    });
  } catch (err) {
    console.error('Topluluk fonu istatistikleri hatasÄ±:', err);
    res.status(500).json({ success: false, error: err.message });
  }
});

// Liderlik tablosu
app.get("/api/leaderboard", async (req, res) => {
  try {
    res.json({ 
      success: true, 
      data: [
        { name: "Ahmet YÄ±lmaz", tokens: 445, savings: 1200 },
        { name: "AyÅŸe Demir", tokens: 515, savings: 1500 },
        { name: "Mehmet Kaya", tokens: 455, savings: 1100 },
        { name: "Fatma Ã–zkan", tokens: 475, savings: 1300 },
        { name: "Ali Ã‡elik", tokens: 435, savings: 1000 }
      ]
    });
  } catch (err) {
    console.error('Liderlik tablosu hatasÄ±:', err);
    res.status(500).json({ success: false, error: err.message });
  }
});

// BaÅŸarÄ±lar
app.get("/api/achievements", async (req, res) => {
  try {
    res.json({ 
      success: true, 
      data: [
        { id: "first-save", name: "Ä°lk Tasarruf", description: "Ä°lk 100 litre tasarruf", unlocked: true },
        { id: "water-warrior", name: "Su SavaÅŸÃ§Ä±sÄ±", description: "1000 litre tasarruf", unlocked: false },
        { id: "token-collector", name: "Token Koleksiyoncusu", description: "100 token topladÄ±n", unlocked: false },
        { id: "community-hero", name: "Topluluk KahramanÄ±", description: "Topluluk fonuna 50 token baÄŸÄ±ÅŸladÄ±n", unlocked: false }
      ]
    });
  } catch (err) {
    console.error('BaÅŸarÄ±lar hatasÄ±:', err);
    res.status(500).json({ success: false, error: err.message });
  }
});

// Tohum satÄ±n alma API'si - mock veri ile gÃ¼venli hale getirildi
app.post("/api/buy-seed", async (req, res) => {
  const { walletAddress, seedId, price } = req.body;
  
  if (!walletAddress || !seedId || !price) {
    return res.status(400).json({ 
      success: false, 
      error: "CÃ¼zdan adresi, tohum ID ve fiyat gerekli" 
    });
  }
  
  try {
    const adminWallet = process.env.ADMIN_PUBLIC_KEY || "GASUZBOCEEYODKEA6M2RYVNADFVBSANCPYNZLWXWX4IQV2IHQTSDBJQE";
    console.log(`ğŸŒ± Tohum satÄ±n alma: ${price} SHT ${walletAddress}'dan ${adminWallet}'e transfer ediliyor...`);
    
    // Transfer iÅŸlemi (gerÃ§ek veya mock)
    const result = await transferTokens(walletAddress, adminWallet, parseInt(price));
    
    // BaÅŸarÄ±lÄ± yanÄ±t
    res.json({ 
      success: true, 
      message: `${seedId} ID'li tohum baÅŸarÄ±yla satÄ±n alÄ±ndÄ±`,
      orderId: `seed-${Date.now()}`,
      txHash: result.txHash || `tx-${Date.now()}`,
      isMock: result.isMock || false
    });
  } catch (err) {
    console.error('Tohum satÄ±n alma iÅŸleminde beklenmeyen hata:', err);
    
    // Beklenmeyen hata durumunda da mock veri dÃ¶n
    res.json({
      success: true,
      message: `${seedId} ID'li tohum baÅŸarÄ±yla satÄ±n alÄ±ndÄ± (Demo)`,
      orderId: `emergency-mock-${Date.now()}`,
      isMock: true
    });
  }
});

// KullanÄ±cÄ±nÄ±n toplam baÄŸÄ±ÅŸ miktarÄ±nÄ± getir
app.get("/api/user-donations/:walletAddress", async (req, res) => {
  const { walletAddress } = req.params;
  
  if (!walletAddress) {
    return res.status(400).json({ 
      success: false, 
      error: "CÃ¼zdan adresi gerekli" 
    });
  }
  
  try {
    // KullanÄ±cÄ±nÄ±n toplam baÄŸÄ±ÅŸ miktarÄ±nÄ± getir
    const donations = await Donation.find({ walletAddress });
    const totalDonated = donations.reduce((sum, donation) => sum + donation.amount, 0);
    
    res.json({
      success: true,
      totalDonated,
      donationCount: donations.length
    });
  } catch (err) {
    console.error('KullanÄ±cÄ± baÄŸÄ±ÅŸlarÄ± getirme hatasÄ±:', err);
    res.status(500).json({ 
      success: false, 
      error: "KullanÄ±cÄ± baÄŸÄ±ÅŸlarÄ± getirilirken bir hata oluÅŸtu" 
    });
  }
});

// Hata yÃ¶netimi middleware'i (TÃœM rotalardan SONRA olmalÄ±)
app.use((err, req, res, next) => {
  console.error('API Error:', err);
  res.status(500).json({ 
    success: false, 
    error: err.message || 'Internal server error' 
  });
});

const PORT = process.env.PORT || 4000;
app.listen(PORT, () => {
  console.log(`Su HakkÄ± Tokenizasyon API ${PORT} portunda Ã§alÄ±ÅŸÄ±yor`);
});